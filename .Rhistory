metrics_ll
21138.64/10
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1,2,3,4,7,"SET1",NA) # Define the list of family sets
#familyset_l <- list("SET1") # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
xx <- data.frame(metrics_ll$logLik)/10
XX
xx
xx <- data.frame(metrics_ll$logLik)
xx
familyset_l <- list("SET1") # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
familyset_l <- list("SET1", NA) # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
familyset_l <- list(2,"SET1", NA) # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
# Initialize an empty list to store results
CVM_ll <- list()
# Define the directory for saving the results
directory <- "dataset/dependence/CVM/"
D
d
family_set=2
# Define the file path for saving/loading the model
file_path <- file.path(directory, paste0("CVM_train_", d, "_family_", family_set, ".rds"))
# Load the precomputed model
CVM <- readRDS(file_path)
CVM
CVM$logLik
CVM$par2
CVM$names
CVM$family
CVM$type
CVM$CondDistr
CVM$nobs
390*10
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1,2,3,4,7,"SET1",NA) # Define the list of family sets
familyset_l <- list(1) # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(train_data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
8659.505/10
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
16872.85/10
familyset_l <- list('SET1') # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
# Define the directory for saving the results
directory <- "dataset/dependence/CVM/"
family_set = "SET1"
# Define the file path for saving/loading the model
file_path <- file.path(directory, paste0("CVM_train_", d, "_family_", family_set, ".rds"))
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1,2,3,4,7,"SET1",NA) # Define the list of family sets
familyset_l <- list(1) # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1,2,3,4,7,"SET1",NA) # Define the list of family sets
familyset_l <- list(1) # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
17277.05/10
cvm_ll <- compute_CVM(train_data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1,2,3,4,7,"SET1",NA) # Define the list of family sets
familyset_l <- list(1) # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
family_set=1
# Define the directory for saving the results
directory <- "dataset/dependence/CVM/"
# Define the file path for saving/loading the model
file_path <- file.path(directory, paste0("CVM_train_", d, "_family_", family_set, ".rds"))
f
f=1
CVM <- RVineStructureSelect(data = data,
type = "CVine",
familyset = f,
selectioncrit = "AIC",
indeptest = TRUE,
level = 0.1,
)
CVM$logLik
# Load the precomputed model
CVM <- readRDS(file_path)
CVM$logLik
f = "SET1"
CVM <- RVineStructureSelect(data = data,
type = "CVine",
familyset = f,
selectioncrit = "AIC",
indeptest = TRUE,
level = 0.1,
)
# Load the precomputed model
CVM <- readRDS(file_path)
CVM$logLik
family_set = "SET1"
# Define the file path for saving/loading the model
file_path <- file.path(directory, paste0("CVM_train_", d, "_family_", family_set, ".rds"))
# Load the precomputed model
CVM <- readRDS(file_path)
CVM$logLik
CVM$family
CVM$type
CVM$nobs
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1,2,3,4,7,"SET1",NA) # Define the list of family sets
familyset_l <- list(1) # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
11667.1/10
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1,2,3,4,7,"SET1",NA) # Define the list of family sets
familyset_l <- list(1) # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1,2,3,4,7,"SET1",NA) # Define the list of family sets
familyset_l <- list("SET1") # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1,2,3,4,7,"SET1",NA) # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
11151.38/10
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1,2,3,4,7,"SET1",NA) # Define the list of family sets
familyset_l <- list("SET1")
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
metrics_ll <- compute_CVM_metrics(test_data, familyset_l, d)
metrics_ll
11901.89/10
3391.137/5
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1,2,3,4,7,"SET1") # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
cvm_ll[6]
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1) # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(mvtnorm)
library(ghyp)
library(zoo)
library(here)
library('VineCopula')
library("rvinecopulib")
source(here('src','utils.R'))
source(here('src','core_functions.R'))
set.seed(1234)
xts_data <- load_rets_data() #Load rets
data <- load_pit_data()      #Load PIT
days = unique(format(index(xts_data), '%Y-%m-%d')) # Total number of days
d <-  10                            # Training
d_forecast <- 5                     # Test
familyset_l <- list(1) # Define the list of family sets
train_data <- select_train_data(d, days, data)               # Select training data
test_data <- select_test_data(d, d_forecast = 5, days, data) # Select testing data
cvm_ll <- compute_CVM(data, family_set_l)
cvm_ll <- compute_CVM(data, familyset_l)
getwd()
library(rugarch)
library(quantmod)
library(readxl)
library(dplyr)
library(zoo)
library(ghyp)
library(stats)
library(GeneralizedHyperbolic)
#-------------------------------------------------------------------------------
# Marginals
#-------------------------------------------------------------------------------
options(scipen = 999)
Sys.setenv(TZ = 'GMT')
df <- read_excel("dataset/df_oct_nov.xlsx")
df$hour <- as.numeric(df$hour)
df$hour_formatted <- sprintf("%06d", df$hour)
df$datetime <- as.POSIXct(strptime(paste(df$day, df$hour_formatted), format="%Y%m%d %H%M"))
start_date <- as.POSIXct("2019-11-01", tz="GMT")
end_date <- as.POSIXct("2019-11-30 23:59:59", tz="GMT")
df <- df[df$datetime >= start_date & df$datetime <= end_date, ]
xts_data <- xts(x = df[, -which(names(df) %in% c("date", "hour", "hour_formatted", "datetime"))], order.by = df$datetime)
tickers <- list("AIG", "AXP", "BAC", "C", "COF", "GS",  "JPM", "MS", "WFC")
# Daily vol
spec_d = ugarchspec(mean.model = list(armaOrder = c(1, 1)),
variance.model = list(model = 'gjrGARCH', garchOrder = c(1, 1)), distribution = 'std')
spec = ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean = TRUE),
variance.model = list(model = 'mcsGARCH'), distribution = 'norm')
ticker <- "c"
R = quantmod::getSymbols(toupper(ticker), from = '2017-01-01',auto.assign=FALSE)
R = quantmod::adjustOHLC(R, use.Adjusted = TRUE)
R_d = TTR::ROC(Cl(R), na.pad = FALSE)
R_d <- R_d['/2019-11-22']
roll = ugarchroll(spec_d, data = R_d, forecast.length = 252 , refit.every = 10, refit.window = 'moving', moving.size = 756, calculate.VaR = FALSE)
aux = as.data.frame(roll)
f_sigma_plot = as.xts(aux[, 'Sigma', drop = FALSE])
f_sigma_plot
# Intraday plots
ticker <- "c"
R = quantmod::getSymbols(toupper(ticker), from = '2017-01-01',auto.assign=FALSE)
R = quantmod::adjustOHLC(R, use.Adjusted = TRUE)
R_d = TTR::ROC(Cl(R), na.pad = FALSE)
R_d <- R_d['/2019-11-22']
subset_data <- xts_data['/2019-11-22',ticker]
n = length(unique(format(index(subset_data), '%Y-%m-%d')))
roll = ugarchroll(spec_d, data = R_d, forecast.length = n , refit.every = 10, refit.window = 'moving', moving.size = 756, calculate.VaR = FALSE)
aux = as.data.frame(roll)
f_sigma = as.xts(aux[, 'Sigma', drop = FALSE])
fit = ugarchfit(data = subset_data, spec = spec, DailyVar = f_sigma^2)
f_sigma_plot
plot(as.numeric(f_sigma_plot), type = 'l', main = '(a) Daily Volatility', col = 'blue3', xaxt = 'n', ylab = 'sigma', xlab = ' ', lwd = thickness,
cex.axis = cex.axis.size, cex.lab = cex.lab.size, cex.main = cex.main.size)
cex.axis.size <- 1.5  # Size for axis labels
cex.lab.size <- 1.5   # Size for x and y axis main labels
cex.main.size <- 1.5  # Size for the main title
thickness <- 1.8
ep_d <- axTicksByTime(f_sigma_plot, 'auto')
ep <- axTicksByTime(fit@model$DiurnalVar)
plot(as.numeric(f_sigma_plot), type = 'l', main = '(a) Daily Volatility', col = 'blue3', xaxt = 'n', ylab = 'sigma', xlab = ' ', lwd = thickness,
cex.axis = cex.axis.size, cex.lab = cex.lab.size, cex.main = cex.main.size)
axis(1, at = ep_d, labels = names(ep_d), tick = TRUE, cex.axis = cex.axis.size)
#Plot
setwd("dataset/margins/Figure")
png("c_marginal.png", width=900, height=600)
cex.axis.size <- 1.5  # Size for axis labels
cex.lab.size <- 1.5   # Size for x and y axis main labels
cex.main.size <- 1.5  # Size for the main title
thickness <- 1.8
ep_d <- axTicksByTime(f_sigma_plot, 'auto')
ep <- axTicksByTime(fit@model$DiurnalVar)
par(mfrow = c(2, 2), mar = c(2.5, 2.5, 2.5, 2.5))
plot(as.numeric(f_sigma_plot), type = 'l', main = '(a) Daily Volatility', col = 'blue3', xaxt = 'n', ylab = 'sigma', xlab = ' ', lwd = thickness,
cex.axis = cex.axis.size, cex.lab = cex.lab.size, cex.main = cex.main.size)
axis(1, at = ep_d, labels = names(ep_d), tick = TRUE, cex.axis = cex.axis.size)
grid()
plot(as.numeric(fit@model$DiurnalVar^0.5), type = 'l', main = '(b) Seasonality', col = 'blue3', xaxt = 'n', ylab = 'sigma', xlab = ' ', lwd = thickness,
cex.axis = cex.axis.size, cex.lab = cex.lab.size, cex.main = cex.main.size)
axis(1, at = ep, labels = names(ep), tick = TRUE, cex.axis = cex.axis.size)
grid()
plot(fit@fit$q, type = 'l', main = '(c) Stochastic Component', col = 'blue3', xaxt = 'n', ylab = 'sigma', xlab = ' ', lwd = thickness,
cex.axis = cex.axis.size, cex.lab = cex.lab.size, cex.main = cex.main.size)
axis(1, at = ep, labels = names(ep), tick = TRUE, cex.axis = cex.axis.size)
grid()
plot(as.numeric(sigma(fit)), type = 'l', main = '(d) Total Volatility', col = 'blue3', xaxt = 'n', ylab = 'sigma', xlab = ' ', lwd = thickness,
cex.axis = cex.axis.size, cex.lab = cex.lab.size, cex.main = cex.main.size)
axis(1, at = ep, labels = names(ep), tick = TRUE, cex.axis = cex.axis.size)
grid()
dev.off()
